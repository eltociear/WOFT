from pathlib import Path
from pytracking.utils.config import Config
from pytracking.optical_flow.mm import MMFlowWrapper
from pytracking.utils.least_squares_H import torch_reproj_errors
from pytracking.utils.least_squares_H import find_homography_nonhomogeneous_QR
from pytracking.evaluation.coco_H_synth_dataset import COCOHSynth


def get_config():
    conf = Config()

    conf.flow = Config()
    conf.flow.of_class = MMFlowWrapper

    config_name = 'liteflownet2_ft_4x1_600k_sintel_kitti_320x768'

    mmflow_dir = Path(__file__).absolute().parent.parent.parent / 'external/mmflow'
    conf.flow.mm_config_file = mmflow_dir / f'configs/liteflownet2/{config_name}.py'
    conf.flow.mm_checkpoint_file = f'~/.cache/mim/{config_name}.pth'
    conf.flow.weight_head_structure = [(128, 3), (128, 3), (128, 3)]

    conf.train = Config()
    conf.train.epochs = 10
    # the dataset was generated by
    # python prepare_wraft_dataset.py --gpu 2 optical_flow/training_configs/sintel-SNOB-0_large_Clr-6-700k.py
    # python prepare_wraft_dataset.py --gpu 2 optical_flow/training_configs/sintel-SNOB-0_large_Clr-6-700k.py --val
    dataset_path = Path(__file__).absolute().parent.parent.parent / 'synth_dataset'
    conf.train.dataset = COCOHSynth(dataset_path / "train_SNOB")
    conf.train.val_dataset = COCOHSynth(dataset_path / "val_SNOB")
    conf.train.H_estimator = find_homography_nonhomogeneous_QR
    conf.train.loss_fn = torch_reproj_errors
    conf.train.lr = 1e-4
    conf.train.lr_step = 1
    conf.train.lr_gamma = 0.5
    conf.train.max_loss = 100.0
    conf.train.max_TC = 2000

    conf.name = Path(__file__).stem

    return conf
